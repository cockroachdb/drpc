// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: chat.proto

package chatpb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_chat_proto struct{}

func (drpcEncoding_File_chat_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_chat_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_chat_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_chat_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_chat_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCChatServiceClient interface {
	DRPCConn() drpc.Conn

	ChatStream(ctx context.Context) (DRPCChatService_ChatStreamClient, error)
}

type drpcChatServiceClient struct {
	cc drpc.Conn
}

func NewDRPCChatServiceClient(cc drpc.Conn) DRPCChatServiceClient {
	return &drpcChatServiceClient{cc}
}

func (c *drpcChatServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcChatServiceClient) ChatStream(ctx context.Context) (DRPCChatService_ChatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/drpcserver.chatpb.ChatService/ChatStream", drpcEncoding_File_chat_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcChatService_ChatStreamClient{stream}
	return x, nil
}

type DRPCChatService_ChatStreamClient interface {
	drpc.Stream
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
}

type drpcChatService_ChatStreamClient struct {
	drpc.Stream
}

func (x *drpcChatService_ChatStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcChatService_ChatStreamClient) Send(m *ChatMessage) error {
	return x.MsgSend(m, drpcEncoding_File_chat_proto{})
}

func (x *drpcChatService_ChatStreamClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.MsgRecv(m, drpcEncoding_File_chat_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcChatService_ChatStreamClient) RecvMsg(m *ChatMessage) error {
	return x.MsgRecv(m, drpcEncoding_File_chat_proto{})
}

type DRPCChatServiceServer interface {
	ChatStream(DRPCChatService_ChatStreamStream) error
}

type DRPCChatServiceUnimplementedServer struct{}

func (s *DRPCChatServiceUnimplementedServer) ChatStream(DRPCChatService_ChatStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCChatServiceDescription struct{}

func (DRPCChatServiceDescription) NumMethods() int { return 1 }

func (DRPCChatServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/drpcserver.chatpb.ChatService/ChatStream", drpcEncoding_File_chat_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCChatServiceServer).
					ChatStream(
						&drpcChatService_ChatStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCChatServiceServer.ChatStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterChatService(mux drpc.Mux, impl DRPCChatServiceServer) error {
	return mux.Register(impl, DRPCChatServiceDescription{})
}

type DRPCChatService_ChatStreamStream interface {
	drpc.Stream
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
}

type drpcChatService_ChatStreamStream struct {
	drpc.Stream
}

func (x *drpcChatService_ChatStreamStream) Send(m *ChatMessage) error {
	return x.MsgSend(m, drpcEncoding_File_chat_proto{})
}

func (x *drpcChatService_ChatStreamStream) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.MsgRecv(m, drpcEncoding_File_chat_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcChatService_ChatStreamStream) RecvMsg(m *ChatMessage) error {
	return x.MsgRecv(m, drpcEncoding_File_chat_proto{})
}
